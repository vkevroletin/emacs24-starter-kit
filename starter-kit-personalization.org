#+TITLE: Personalization
#+OPTIONS: toc:2 num:nil ^:nil

* Why

I share my Emacs configuration between work and home machines. Using
machine or user specific configuration is not convenient because
on working machine I use corporative user account with strange name
which I don't want to use at home.

* Enable Starter Kit parts
   :PROPERTIES:
   :CUSTOM_ID: starter-kit-enabled-parts
   :END:

- Disable menu bar and toolbar
  #+begin_src emacs-lisp
    (starter-kit-load "misc-recommended")
  #+end_src

- Org mode configured to own GTD-like workflow
  #+begin_src emacs-lisp
    (starter-kit-load "org")
  #+end_src

- Yasnippet: type word and press TAB to expand
  #+begin_src emacs-lisp
    (starter-kit-load "yasnippet")
  #+end_src

- Haskell. This requires installation of external software.
  #+begin_src emacs-lisp
    (starter-kit-load "haskell")
  #+end_src

- Helm. Interactive fuzzy matching for every day emacs commands.
  #+begin_src emacs-lisp
    (starter-kit-load "helm")
  #+end_src

- Fast interactive words completion using company mode. Useful in
  programming modes to complete identifiers' names..
  #+begin_src emacs-lisp
    (starter-kit-load "completion")
  #+end_src

- Cpp mode
  #+begin_src emacs-lisp
    (starter-kit-load "cpp")
  #+end_src

- Lisp
  #+begin_src emacs-lisp
    (starter-kit-load "lisp")
  #+end_src

* Improve appearance                                    :manual_installation:

- Enable theme

  Theme should be loaded after custom (because custom stores hash sum to
  enable selected theme).

  An Emacs port of the Atom Dark theme from Atom.io.
  You can find other themes using M-x customize-themes.
  #+begin_src emacs-lisp
    (starter-kit-install-if-needed 'atom-dark-theme)
    (load-theme 'atom-dark t)
  #+end_src

- Disable scroll bar
  #+begin_src emacs-lisp
    (scroll-bar-mode -1)
  #+end_src

- Show cursor position in modeline
  #+begin_src emacs-lisp
    (line-number-mode t)
    (column-number-mode t)
  #+end_src

** Fix colors
  Some extensions doesn't play well with dark themes.

  + Fix diff
  #+begin_src emacs-lisp
    (custom-set-faces
     '(diff-added ((t (:inherit diff-changed :background "#336633" :foreground "#cceecc"))))
     '(diff-context ((t (:foreground "grey70"))))
     '(diff-file-header ((t (:weight bold))))
     '(diff-header ((t (:background "grey30"))))
     '(diff-removed ((t (:inherit diff-changed :background "#663333" :foreground "#eecccc")))))
  #+end_src

* Improve compile command

- Problems of default compile command

  Default ~compile~ stores last compilation command and directory.
  Following calls to ~recompile~ use them so you can repeat exactly same
  compilation from other directory. This approach works well unless you
  edit several projects in same time.

- Enhanced compile command
  + Asks for directory instead of using current directory. So you
    don't have to ~cd~.
  + Combines ~compile~ and ~recompile~ in same function. First call
    asks for directory and command, successive calls just recompile.
  + Knows about projects defined by Projectile
    Separate pairs of directory/command per project.
  + Persists cache between sessions.
  #+begin_src emacs-lisp
    (require 'compile-per-project)
    (fset #'compile   'compile-per-project/compile)
    (fset #'recompile 'compile-per-project/recompile)
  #+end_src

  + Run is similar to compile but with it's own cache
  #+begin_src emacs-lisp
    (fset #'run  #'compile-per-project/run)
    (fset #'test #'compile-per-project/test)
  #+end_src

- Key bindings for compile commands
  #+begin_src emacs-lisp
    (global-set-key (kbd "<f5>") #'recompile)
    (global-set-key (kbd "<f6>") #'run)
    (global-set-key (kbd "<f7>") #'test)
  #+end_src

* Improve editing productivity
** Key bindings

TODO: consider creating minor mode like in [[https://github.com/bbatsov/prelude/blob/master/core/prelude-mode.el][Prelude]].

We are going to avoid movement of right hand to right part of keyboard.

- Buffers cycling is useful combination
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-<") 'previous-buffer)
    (global-set-key (kbd "C->") 'next-buffer)
  #+end_src

- Delete character backward is one of the most important keys.

  C-M-h is standard combination to delete word backward. C-h hows help
  which is extremely useful Emacs feature. Let's use M-h to delete
  character backward.
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-h") #'backward-delete-char-untabify)
    (require 'org)
    (define-key org-mode-map (kbd "M-h") #'backward-delete-char-untabify)
    (define-key c-mode-base-map (kbd "C-M-h") #'backward-kill-word)
  #+end_src

- just-one-space is useful but deleting all spaces is better
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-SPC") #'delete-horizontal-space)
    (global-set-key (kbd "M-\\") #'just-one-space)
  #+end_src

- M-o to open new line /(like o and O in Vim)/ [4]
  #+begin_src emacs-lisp
    (defun prelude-smart-open-line-above ()
      "Insert an empty line above the current line.
        Position the cursor at it's beginning, according to the current mode."
      (interactive)
      (move-beginning-of-line nil)
      (newline-and-indent)
      (forward-line -1)
      (indent-according-to-mode))

    (defun prelude-smart-open-line (arg)
      "Insert an empty line after the current line.
    Position the cursor at its beginning, according to the current mode.

    With a prefix ARG open line above the current line."
      (interactive "P")
      (if arg
          (prelude-smart-open-line-above)
        (progn
          (move-end-of-line nil)
          (newline-and-indent))))

    (global-set-key (kbd "M-o") 'prelude-smart-open-line)
    (global-set-key (kbd "M-O") 'prelude-smart-open-line-above)
  #+end_src

- M-m to jump between groups separated by whitespaces
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-m") #'forward-whitespace)
  #+end_src

- F12 to convert camelCase words into snake_Case
  #+begin_src emacs-lisp
    (global-set-key (kbd "<f12>") #'glasses-mode)
  #+end_src

** Syntax table
+ Treat snake_case_words as single word but not 3 different
  words. Useful for C programs.
  #+begin_src emacs-lisp
    (global-superword-mode)
  #+end_src

* Fight tabs and white spaces

- Good bye trailing white spaces
  #+begin_src emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+end_src

* Relative linum

Relative linum helps to quickly jump to required line.

- Install
  #+begin_src emacs-lisp
    (starter-kit-install-if-needed 'linum-relative)
    (require 'linum-relative)

    (defun starter-kit-enable-linum ()
      (interactive)
      (linum-mode))
  #+end_src

- Enable linum for programming languages. Here [3] is description how this
  code works.
  #+begin_src emacs-lisp
    (mapc
     (lambda (mode-hook)
       (add-hook mode-hook 'starter-kit-enable-linum))
     '(text-mode-hook
       prog-mode-hook
       comint-mode-hook
       conf-mode-hook))
  #+end_src

- Improve appearance
  #+begin_src emacs-lisp
    (custom-set-variables
      '(linum-relative-current-symbol ">"))

    (custom-set-faces
      '(linum-relative-current-face ((t (:inherit linum)))))
  #+end_src

** Isearch

+ C-k to kill selected text during isearch [1]
  #+begin_src emacs-lisp
    (defun kill-isearch-match ()
      "Kill the current isearch match string and continue searching."
      (interactive)
      (kill-region isearch-other-end (point))
      (isearch-exit))

    (define-key isearch-mode-map [(control k)] 'kill-isearch-match)
  #+end_src

* Environment fixes

+ Emacs can't execute some programs which are available from command
  line on my Linux machine
  #+begin_src emacs-lisp
    (unless (eq system-type 'windows-nt)
      (starter-kit-install-if-needed 'exec-path-from-shell)
      (exec-path-from-shell-initialize))
  #+end_src

+ Show ansi colors in compilation buffer [2]

  #+begin_src emacs-lisp
    (ignore-errors
      (require 'ansi-color)
      (defun starter-kit-colorize-compilation-buffer ()
        (when (eq major-mode 'compilation-mode)
          (ansi-color-apply-on-region compilation-filter-start (point-max))))
      (add-hook 'compilation-filter-hook 'starter-kit-colorize-compilation-buffer))
  #+end_src

* Enable masked commands

#+begin_src emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+end_src

* References

[1] http://www.emacswiki.org/emacs/KillISearchMatch
[2] http://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode
[3] https://github.com/xiaohanyu/oh-my-emacs/blob/master/core/ome-advanced.org
[4] https://github.com/bbatsov/prelude/blob/master/core/prelude-core.el
